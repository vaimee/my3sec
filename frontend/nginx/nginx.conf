user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;  

    keepalive_timeout  65;

    gzip on;
    gzip_types application/javascript;
    gzip_buffers 32 8k;

    server {
        listen       80;
        server_name  localhost;       
		
		root   /usr/share/nginx/html;
		
        # This prevents the Nginx version from being sent in the server header, which can be considered a security risk.
        server_tokens off;		
        
        # This location block will match the index.html file, and any JSON file, and it instructs the browser not to cache these files.
        # If the index.html file were to be cached by the browser, then when a new version of the application was deployed, users would still see the old version, unless the cache expired or was explicitly cleared.
        # I include JSON files here, as I use them to ship application settings (which I’ve written about here, and want changes to those settings to take effect as quickly as possible.
        # The block ends by including a file that sets some security headers. I’ll look at the security-headers.conf file below.
        location ~ /index.html|.*\.json$ {
          expires -1;        
          add_header Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
          include /etc/nginx/security-headers.conf;        
        }

        # The next block matches CSS and JavaScript files and instructs the browser to cache them for a year. 
        # These often-large files, so benefit from prolonged caching, and because Angular employs cache-busting in its production builds, 
        # there’s no danger of stale files being used by the browser, provided the index.html file is not cached.
        # Once again, the block also includes the security headers.
        location ~ .*\.css$|.*\.js$ {               
          add_header Cache-Control 'max-age=31449600'; # one year        
          include /etc/nginx/security-headers.conf;        
        }

        # The final location block matches all requests that aren’t matched by one of the other more specific blocks.
        # The try_files instruction attempts to match the request to a file or directory — and so this is the block that will match image or font files, for example.
        # If there are no matching files or directories, it uses the /index.html URI. This means that a user who tries to use a deep-linked URL, e.g. https://myangularapp.example.com/my/deep/link, 
        # will be served the index.html file. Without this, the request would result in a 404. 
        # Files that are matched by this block are cached for a day, which means that users benefit from caching of image or font files, but if these files are updated, the users will still get the new versions quite soon.
        # As ever, the security headers are also included.
        location / {
		  try_files $uri$args $uri$args/ /index.html;
          
          add_header Cache-Control 'max-age=86400'; # one day
          include /etc/nginx/security-headers.conf;       
		}

        # TODO: we currently don't have error pages for 5xx errors.
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }

    }
}